
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDECOMMA DIVIDE ELSE EQUALS FUNCTION GT ID IF LBRACE LPAREN LT MINUS NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON TIMES WHILEprogram : declaration_listdeclaration_list : declarationdeclaration_list : declaration_list declarationdeclaration : func_def\n                   | statementfunc_def : FUNCTION ID LPAREN param_list RPAREN LBRACE statement_list RETURN expression SEMICOLON RBRACEparam_list : param_list : IDparam_list : param_list COMMA IDexpression : ID LPAREN arg_list RPARENarg_list : arg_list : expressionarg_list : arg_list COMMA expressionstatement_list : statementstatement_list : statement_list statementstatement : assign\n                 | if_statement\n                 | if_else_statement\n                 | while_statementassign : ID EQUALS expression SEMICOLONif_statement : IF LPAREN expression GT expression RPAREN LBRACE statement_list RBRACEif_else_statement : IF LPAREN expression GT expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEwhile_statement : WHILE LPAREN expression GT expression RPAREN LBRACE statement_list RBRACEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : IDexpression : LPAREN expression RPAREN'
    
_lr_action_items = {'FUNCTION':([0,2,3,4,5,8,9,10,11,14,29,64,65,68,71,],[6,6,-2,-4,-5,-16,-17,-18,-19,-3,-20,-21,-23,-6,-22,]),'ID':([0,2,3,4,5,6,8,9,10,11,14,16,17,18,19,22,28,29,30,31,32,33,35,36,38,48,51,54,55,57,58,59,60,61,62,64,65,68,69,70,71,],[7,7,-2,-4,-5,15,-16,-17,-18,-19,-3,20,20,20,26,20,20,-20,20,20,20,20,20,20,49,7,20,7,-14,7,7,20,-15,7,7,-21,-23,-6,7,7,-22,]),'IF':([0,2,3,4,5,8,9,10,11,14,29,48,54,55,57,58,60,61,62,64,65,68,69,70,71,],[12,12,-2,-4,-5,-16,-17,-18,-19,-3,-20,12,12,-14,12,12,-15,12,12,-21,-23,-6,12,12,-22,]),'WHILE':([0,2,3,4,5,8,9,10,11,14,29,48,54,55,57,58,60,61,62,64,65,68,69,70,71,],[13,13,-2,-4,-5,-16,-17,-18,-19,-3,-20,13,13,-14,13,13,-15,13,13,-21,-23,-6,13,13,-22,]),'$end':([1,2,3,4,5,8,9,10,11,14,29,64,65,68,71,],[0,-1,-2,-4,-5,-16,-17,-18,-19,-3,-20,-21,-23,-6,-22,]),'EQUALS':([7,],[16,]),'RETURN':([8,9,10,11,29,54,55,60,64,65,71,],[-16,-17,-18,-19,-20,59,-14,-15,-21,-23,-22,]),'RBRACE':([8,9,10,11,29,55,60,61,62,64,65,66,70,71,],[-16,-17,-18,-19,-20,-14,-15,64,65,-21,-23,68,71,-22,]),'LPAREN':([12,13,15,16,17,18,20,22,28,30,31,32,33,35,36,51,59,],[17,18,19,22,22,22,28,22,22,22,22,22,22,22,22,22,22,]),'NUMBER':([16,17,18,22,28,30,31,32,33,35,36,51,59,],[23,23,23,23,23,23,23,23,23,23,23,23,23,]),'RPAREN':([19,20,23,26,27,28,34,39,40,41,42,43,44,45,46,47,49,50,56,],[-7,-29,-28,-8,37,-11,45,50,-12,-24,-25,-26,-27,-30,52,53,-9,-10,-13,]),'COMMA':([19,20,23,26,27,28,39,40,41,42,43,44,45,49,50,56,],[-7,-29,-28,-8,38,-11,51,-12,-24,-25,-26,-27,-30,-9,-10,-13,]),'SEMICOLON':([20,21,23,41,42,43,44,45,50,63,],[-29,29,-28,-24,-25,-26,-27,-30,-10,66,]),'PLUS':([20,21,23,24,25,34,40,41,42,43,44,45,46,47,50,56,63,],[-29,30,-28,30,30,30,30,-24,-25,-26,-27,-30,30,30,-10,30,30,]),'MINUS':([20,21,23,24,25,34,40,41,42,43,44,45,46,47,50,56,63,],[-29,31,-28,31,31,31,31,-24,-25,-26,-27,-30,31,31,-10,31,31,]),'TIMES':([20,21,23,24,25,34,40,41,42,43,44,45,46,47,50,56,63,],[-29,32,-28,32,32,32,32,32,32,-26,-27,-30,32,32,-10,32,32,]),'DIVIDE':([20,21,23,24,25,34,40,41,42,43,44,45,46,47,50,56,63,],[-29,33,-28,33,33,33,33,33,33,-26,-27,-30,33,33,-10,33,33,]),'GT':([20,23,24,25,41,42,43,44,45,50,],[-29,-28,35,36,-24,-25,-26,-27,-30,-10,]),'LBRACE':([37,52,53,67,],[48,57,58,69,]),'ELSE':([64,],[67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,14,]),'func_def':([0,2,],[4,4,]),'statement':([0,2,48,54,57,58,61,62,69,70,],[5,5,55,60,55,55,60,60,55,60,]),'assign':([0,2,48,54,57,58,61,62,69,70,],[8,8,8,8,8,8,8,8,8,8,]),'if_statement':([0,2,48,54,57,58,61,62,69,70,],[9,9,9,9,9,9,9,9,9,9,]),'if_else_statement':([0,2,48,54,57,58,61,62,69,70,],[10,10,10,10,10,10,10,10,10,10,]),'while_statement':([0,2,48,54,57,58,61,62,69,70,],[11,11,11,11,11,11,11,11,11,11,]),'expression':([16,17,18,22,28,30,31,32,33,35,36,51,59,],[21,24,25,34,40,41,42,43,44,46,47,56,63,]),'param_list':([19,],[27,]),'arg_list':([28,],[39,]),'statement_list':([48,57,58,69,],[54,61,62,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','mparser.py',16),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_single','mparser.py',20),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_multi','mparser.py',24),
  ('declaration -> func_def','declaration',1,'p_declaration','mparser.py',28),
  ('declaration -> statement','declaration',1,'p_declaration','mparser.py',29),
  ('func_def -> FUNCTION ID LPAREN param_list RPAREN LBRACE statement_list RETURN expression SEMICOLON RBRACE','func_def',11,'p_func_def','mparser.py',34),
  ('param_list -> <empty>','param_list',0,'p_param_list_empty','mparser.py',38),
  ('param_list -> ID','param_list',1,'p_param_list_single','mparser.py',42),
  ('param_list -> param_list COMMA ID','param_list',3,'p_param_list_multi','mparser.py',46),
  ('expression -> ID LPAREN arg_list RPAREN','expression',4,'p_expression_call','mparser.py',51),
  ('arg_list -> <empty>','arg_list',0,'p_arg_list_empty','mparser.py',55),
  ('arg_list -> expression','arg_list',1,'p_arg_list_single','mparser.py',59),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list_multi','mparser.py',63),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','mparser.py',68),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multi','mparser.py',72),
  ('statement -> assign','statement',1,'p_statement','mparser.py',76),
  ('statement -> if_statement','statement',1,'p_statement','mparser.py',77),
  ('statement -> if_else_statement','statement',1,'p_statement','mparser.py',78),
  ('statement -> while_statement','statement',1,'p_statement','mparser.py',79),
  ('assign -> ID EQUALS expression SEMICOLON','assign',4,'p_assign','mparser.py',83),
  ('if_statement -> IF LPAREN expression GT expression RPAREN LBRACE statement_list RBRACE','if_statement',9,'p_if_statement','mparser.py',87),
  ('if_else_statement -> IF LPAREN expression GT expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_else_statement',13,'p_if_else_statement','mparser.py',91),
  ('while_statement -> WHILE LPAREN expression GT expression RPAREN LBRACE statement_list RBRACE','while_statement',9,'p_while_statement','mparser.py',95),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','mparser.py',99),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','mparser.py',100),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','mparser.py',101),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','mparser.py',102),
  ('expression -> NUMBER','expression',1,'p_expression_number','mparser.py',106),
  ('expression -> ID','expression',1,'p_expression_id','mparser.py',110),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','mparser.py',114),
]
